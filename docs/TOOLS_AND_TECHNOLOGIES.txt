================================================================================
              TOOLS AND TECHNOLOGIES - NLP RESUME ANALYZER SYSTEM
================================================================================

This document provides a categorized overview of all technologies used in the
NLP Resume Analyzer project.

================================================================================


1. FRONTEND TECHNOLOGIES
================================================================================

• HTML5 - Semantic markup and web page structure for all templates
• CSS3 - Styling, responsive design, and animations with Flexbox/Grid
• JavaScript ES6+ - DOM manipulation, dark mode toggle, and form interactivity
• Tailwind CSS v4 - Utility-first CSS framework with dark mode support
• Jinja2 - Server-side template engine for dynamic HTML rendering
• localStorage API - Client-side storage for user preferences (dark mode)


================================================================================


2. BACKEND TECHNOLOGIES
================================================================================

**Core Framework:**
• Python 3.13 - Primary backend language for all business logic
• Flask 2.3+ - Lightweight web framework for routing and request handling
• Werkzeug 2.3+ - WSGI utility library for secure file handling

**Database & ORM:**
• SQLite 3 - Embedded relational database for analysis storage
• SQLAlchemy 3.0+ - ORM for database models and query management
• Flask-SQLAlchemy - Flask integration for SQLAlchemy

**Web Features:**
• Flask-WTF 1.1+ - Form validation and CSRF protection for secure uploads


================================================================================


3. NLP & MACHINE LEARNING
================================================================================

**NLP Libraries:**
• Spacy 3.7+ - Natural language processing for tokenization and NER
• en_core_web_sm - Spacy's small English model for text parsing (~13 MB)
• Sentence Transformers 2.2+ - Semantic text embeddings using BERT
• all-MiniLM-L6-v2 - BERT-based model for similarity calculation (~80 MB)
• TextStat 0.7+ - Text readability and complexity analysis

**ML Libraries:**
• Scikit-learn 1.3+ - Machine learning utilities and similarity metrics
• Cosine Similarity - Measure semantic similarity between resume and job description


================================================================================


4. DATA PROCESSING & FILE HANDLING
================================================================================

• PyMuPDF (fitz) 1.23+ - PDF text extraction from resume files
• python-docx 0.8.11+ - DOCX text extraction from Word documents
• Pandas 2.0+ - Data manipulation and CSV export functionality
• NumPy 1.24+ - Numerical computing and array operations
• PyYAML 6.0+ - YAML configuration file parsing (skills, action verbs)
• Regular Expressions (re) - Pattern matching for email, phone, skills extraction


================================================================================


5. DEVELOPMENT TOOLS
================================================================================

**IDE & Editor:**
• Visual Studio Code - Primary IDE with Python, Git, and Tailwind extensions
• Pylance - Python language server for IntelliSense and type checking

**Version Control:**
• Git - Source code version control with feature branch workflow
• GitHub - Remote repository hosting and collaboration platform

**Python Environment:**
• pip - Package installer and dependency management
• venv - Virtual environment for isolated Python dependencies

**Testing:**
• pytest 7.4+ - Python testing framework for unit and integration tests
• pytest-flask 1.2+ - Flask-specific testing utilities and fixtures

**Code Quality:**
• Black 23.0+ - Automatic Python code formatter for PEP 8 compliance
• Flake8 6.0+ - Python linting tool for style checking and error detection


================================================================================


6. DEPLOYMENT & CONTAINERIZATION
================================================================================

• Docker - Application containerization using python:3.13.7-slim base image
• Gunicorn 21.0+ - Production-ready WSGI HTTP server for Flask
• Flask Development Server - Local development server with auto-reload
• python-dotenv 1.0+ - Environment variable management for configuration


================================================================================


7. PROJECT MANAGEMENT & AI TOOLS
================================================================================

• Linear - Issue tracking and project management with sprint planning
• Model Context Protocol (MCP) - AI-assisted project management and documentation
• Mermaid - Text-based diagram creation for UML and flowcharts (15+ types)
• Markdown - Documentation format for README and feature docs


================================================================================


8. DATA FORMATS & PROTOCOLS
================================================================================

• JSON - Data interchange format for analysis results and exports
• CSV - Tabular data export format for bulk history downloads
• YAML - Human-readable configuration files for skills and action verbs
• HTTP/HTTPS - Web communication protocol with REST principles
• SQL - Database query language for SQLite operations


================================================================================


9. BROWSERS & WEB STANDARDS
================================================================================

• Google Chrome - Primary testing browser with developer tools
• Mozilla Firefox - Cross-browser compatibility testing
• Microsoft Edge - Chromium-based browser for Windows compatibility
• WCAG 2.1 - Web accessibility guidelines for semantic HTML and navigation


================================================================================


10. SECURITY MEASURES
================================================================================

• CSRF Protection - Token-based form security via Flask-WTF
• SQL Injection Prevention - SQLAlchemy ORM parameterized queries
• XSS Prevention - Jinja2 automatic HTML escaping
• Secure File Handling - UUID-based filenames and type validation
• werkzeug.secure_filename() - Sanitize uploaded file names


================================================================================


11. BUILD & AUTOMATION
================================================================================

• Tailwind CSS CLI - CSS compilation with JIT mode and minification
• PowerShell - Windows command-line interface for development tasks
• Bash/Zsh - Unix/Linux command-line for deployment and scripting


================================================================================


12. OPTIONAL/FUTURE TECHNOLOGIES
================================================================================

• BeautifulSoup4 4.12+ - HTML parsing for future job posting scraping
• Requests 2.31+ - HTTP library for future API integrations
• Heroku/AWS/GCP - Cloud platforms for production deployment
• Docker Compose - Multi-container orchestration for complex deployments


================================================================================


TECHNOLOGY STACK SUMMARY
================================================================================

**Frontend:** HTML5, CSS3, JavaScript ES6+, Tailwind CSS v4, Jinja2
**Backend:** Python 3.13, Flask 2.3+, SQLAlchemy 3.0+, SQLite
**NLP/AI:** Spacy 3.7+, Sentence Transformers 2.2+, BERT models
**Data Processing:** Pandas, NumPy, PyMuPDF, python-docx, PyYAML
**Development:** VS Code, Git/GitHub, pytest, Black, Flake8, venv
**Deployment:** Docker, Gunicorn, Flask dev server
**Project Management:** Linear, Model Context Protocol (MCP), Mermaid
**Security:** CSRF protection, SQLAlchemy ORM, input validation

**Total Technologies:** 50+ libraries, frameworks, and tools

================================================================================
                         END OF TOOLS AND TECHNOLOGIES
================================================================================

Last Updated: October 7, 2025
Project: NLP Resume Analyzer
Version: 2.0
Repository: https://github.com/modakPrince/nlp_resume_analyzer

================================================================================
